#!/usr/bin/env python

###
# Gimb - Github Markdown Blogger
###

import sys, os, json, argparse, uuid
import misaka as m
from mako.template import Template
from mako.lookup import TemplateLookup

version_number = "0.1"
config_file    = 'gymb.json'
post_structure = {
    "uid"       : "",
    "title"     : "",
    "created"   : "",
    "updated"   : "",
    "published" : False
}

mylookup = TemplateLookup(directories=['.'])
gimp_template = """<%inherit file="base.html"/><%block name="content">${cnt}</%block>"""

## Config actions
#

def read_config():
    return json.loads(open(config_file).read())

def save_config(config):
    open(config_file,'w').write(json.dumps(config, sort_keys=True, indent=4, separators=(',', ' : ')))

## Blog actions
#

def get_path(args):
    path = args.path.split('/')
    if len(path) > 2:
        sys.exit("ERROR: Too long path. Gymb only support 1 level deep blogs.")
    blog = path[0]
    post = len(path) > 1 and path[1] or None
    return blog, post

def add_blog(config, args):
    if os.path.exists(args.path):
        sys.exit("ERROR: %s already exists." % args.path)
    blog, post = get_path(args)
    if blog not in config['blogs']:
        os.makedirs(blog)
        config['blogs'].append(blog)
        config[blog] = {}
        save_config(config)
        print "Added blog %s" % blog
    if post != None:
        if not post.endswith('.md'):
            sys.exit("ERROR: For now posts need's to use the .md (markdown) extension.")
        open(args.path, 'w').close()
#        uid = uuid.uuid4().hex[:8]
        config[blog][post] = post_structure
#        config[blog][post]['uid'] = uid
        print "Added %s to %s" % (post,blog)

def del_blog(config, args):
    print "removing blog"

def meta_blog(config, args):
    blog, post = get_path(args)
    if post == None:
        return
    if args.title != None:
        config[blog][post]['title'] = args.title
    if args.published != None:
        config[blog][post]['published'] = args.published

## Build actions
#

def build(config):
    makofiles = []
    mdfiles = []
    for (path, dirs, files) in os.walk('.'):
        for file in files:
            if file.endswith('.mako'):
                makofiles.append('%s/%s' % (path, file))
            if file.endswith('.md'):
                mdfiles.append('%s/%s' % (path, file))
    for mdf in mdfiles:
        content  = m.html(open(mdf).read())
        makofile = mdf.replace('.md','.mako')
        if (makofile in makofiles):
            template = open(makofile).read()
        else:
            template = gimp_template
        tmpl = Template(template, lookup=mylookup)
        html = tmpl.render(cnt=content)
        open(mdf.replace('.md','.html'),'w').write(html)
    for mf in makofiles:
        mdfile = mf.replace('.mako','.md')
        if (mdfile not in mdfiles):
            tmpl = Template(filename=mf, lookup=mylookup)
            html = tmpl.render()
            open(mf.replace('.mako','.html'),'w').write(html)

blog_action_map = {
    'add'  : add_blog,
    'del'  : del_blog,
    'meta' : meta_blog
}

parser = argparse.ArgumentParser(description='Gymb ~ The Github Python Markdown Blogger.')
subparsers = parser.add_subparsers()
parser_build = subparsers.add_parser('build', help='Generate html from .md and .mako files.')
parser_build.set_defaults(intent='build')
parser_blog = subparsers.add_parser('blog', help='Add, del or interact with a blog')
parser_blog.set_defaults(intent='blog')
parser_blog.add_argument('action', choices=['add','del','meta'], help='Add or del a blog or a post')
parser_blog.add_argument('--title', type=str, help='Post title')
parser_blog.add_argument('--published', type=str, help='Post publish date, use "now" for current date')
parser_blog.add_argument('path', type=str, help='Path to blog or post')
parser.add_argument('--version', action='version', version='%(prog)s '+version_number)
args = parser.parse_args()

if __name__ == "__main__":
    args = parser.parse_args()
    config = read_config()
    if args.intent == 'build':
        build(config)
    if args.intent == 'blog':
        blog_action_map[args.action](config, args)
    save_config(config)
